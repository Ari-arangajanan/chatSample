package com.wonder.chatSample.webSocket;import com.wonder.chatSample.configs.SpringAwareConfigurator;import com.wonder.chatSample.webSocket.model.MessageType;import com.wonder.chatSample.webSocket.model.WebsocketMessage;import com.wonder.chatSample.webSocket.utility.MessageDecoder;import com.wonder.chatSample.webSocket.utility.MessageEncoder;import com.wonder.chatSample.xmpp.XmppFacecade;import lombok.extern.slf4j.Slf4j;import org.jivesoftware.smack.SmackException;import org.jivesoftware.smack.XMPPException;import org.springframework.stereotype.Component;import javax.websocket.*;import javax.websocket.server.PathParam;import javax.websocket.server.ServerEndpoint;import java.io.IOException;import java.util.concurrent.Executors;import java.util.concurrent.ScheduledExecutorService;import java.util.concurrent.TimeUnit;@Slf4j@Component@ServerEndpoint(value = "/chat/{username}/{password}", decoders = MessageDecoder.class, encoders = MessageEncoder.class, configurator = SpringAwareConfigurator.class)public class ChatWebSocket {    private final XmppFacecade xmppFacecade;    private final ScheduledExecutorService heartbeatExecutor = Executors.newScheduledThreadPool(1);    public ChatWebSocket(XmppFacecade xmppFacecade) {        this.xmppFacecade = xmppFacecade;    }//    public ChatWebSocket() {//        this.xmppFacecade = (XmppFacecade) SpringContext.getApplicationContext().getBean("XmppFacecade");//    }    /*     * https://jakarta.ee/learn/docs/jakartaee-tutorial/current/web/websocket/websocket.html#:~:text=The%20Endpoint%20class%20defines%20three,endpoint%20and%20the%20remote%20endpoint.     */    @OnOpen    public void open(Session session, @PathParam("username") String username, @PathParam("password") String password) throws SmackException, EncodeException, IOException, XMPPException, InterruptedException {        log.info("Starting XMPP session '{}'.", session.getId());        xmppFacecade.startSession(session, username, password);        heartBeat(session);    }    @OnMessage    public void message(WebsocketMessage message, Session session) throws EncodeException, IOException {        log.info("Sending message for session '{}'.", session.getId());        xmppFacecade.sendMessage(message,session);        log.info("Message sent for session '{}'.", session.getId());    }    @OnError    public void error(Session session, Throwable error) throws EncodeException, IOException {        log.warn("Something went wrong.", error);        xmppFacecade.disconnect(session);    }    @OnClose    public void close(Session session, CloseReason reason) throws EncodeException, IOException {        xmppFacecade.disconnect(session);    }    private void heartBeat(Session session){        heartbeatExecutor.scheduleAtFixedRate(() -> {            try {                if (session.isOpen()) {                    WebsocketMessage pingMessage = WebsocketMessage.builder()                            .from("server")  // Server as the sender                            .to(session.getId())  // Session ID or user identifier                            .content("ping")  // Content of the ping message                            .messageType(MessageType.PING)  // Message type is PING                            .build();                    session.getBasicRemote().sendObject(pingMessage);                    log.info("Ping sent to session '{}'", session.getId());                }            } catch (IOException e) {                log.error("Error sending heartbeat ping to session '{}'", session.getId(), e);            } catch (EncodeException e) {                throw new RuntimeException(e);            }        }, 0, 30, TimeUnit.SECONDS);  // Ping every 30 seconds    }    private void stopHeartbeat() {        heartbeatExecutor.shutdown();    }}